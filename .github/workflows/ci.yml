name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  backend-build-and-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore backend/ObdDashboard.csproj

    - name: Build backend
      run: dotnet build backend/ObdDashboard.csproj --configuration Release --no-restore

    - name: Run backend tests
      run: dotnet test backend/ObdDashboard.csproj --configuration Release --no-build --verbosity normal

    - name: Publish backend
      run: dotnet publish backend/ObdDashboard.csproj --configuration Release --no-build --output backend/publish

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: backend/publish/

  frontend-build-and-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: frontend/build/

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: obd2dashboard-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: obd2dashboard-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test docker-compose build
      run: |
        # Test that docker-compose builds successfully (excluding emulator for production)
        docker-compose -f docker-compose.yml build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run security scan on backend
      run: |
        dotnet list backend/ObdDashboard.csproj package --vulnerable --include-transitive || true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit on frontend
      run: |
        cd frontend
        npm audit --audit-level moderate || true

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore .NET tools
      run: dotnet tool restore || dotnet tool install --global dotnet-format

    - name: Check .NET code formatting
      run: dotnet format backend/ObdDashboard.csproj --verify-no-changes --verbosity diagnostic || true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint || echo "ESLint not configured"
      working-directory: frontend